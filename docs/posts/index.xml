<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Darius Hall</title>
        <link>https://dariushall.com/posts/</link>
        <description>Recent content in Posts on Darius Hall</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 07 Apr 2021 07:36:28 -0600</lastBuildDate>
        <atom:link href="https://dariushall.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>AWS WAF Labs: Operational Excellence</title>
            <link>https://dariushall.com/posts/2021/04/aws-waf-labs-operational-excellence/</link>
            <pubDate>Wed, 07 Apr 2021 07:36:28 -0600</pubDate>
            
            <guid>https://dariushall.com/posts/2021/04/aws-waf-labs-operational-excellence/</guid>
            <description>AWS Well-Architected Framework A few month ago, I stumbled across some AWS provided resources in the form of labs that one can work through to better understand some of AWS recommended best practices. I don&amp;rsquo;t fully recall all the links I ended up finding (this is why the blog is being written - I know, browser bookmarks would also have been a good idea&amp;hellip;), but at least one of the places with some good labs to work through is https://wellarchitectedlabs.</description>
            <content type="html"><![CDATA[<h1 id="aws-well-architected-framework">AWS Well-Architected Framework</h1>
<p>A few month ago, I stumbled across some AWS provided resources in the form of labs that one can work through to better understand some of AWS recommended best practices. I don&rsquo;t fully recall all the links I ended up finding (this is why the blog is being written - I know, browser bookmarks would also have been a good idea&hellip;), but at least one of the places with some good labs to work through is <a href="https://wellarchitectedlabs.com" title="AWS Well Architected Labs">https://wellarchitectedlabs.com</a>.</p>
<p>So, this is Part 1 of my experience going through these labs. If you are not acquainted with the Well Architected Framework (WAF), you can read more about it in-depth at <a href="https://aws.amazon.com/architecture/well-architected/?wa-lens-whitepapers.sort-by=item.additionalFields.sortDate&amp;wa-lens-whitepapers.sort-order=desc" title="AWS Well-Architected">AWS&rsquo;s website</a>. The nutshell version is the WAF is a framework that cloud architects can use to build robust, resilient, secure, performant and scalable cloud based infrastructure and application in the AWS ecosystem. It is comprised of 5 &ldquo;pillars&rdquo;:</p>
<ol>
<li>Operational Excellence</li>
<li>Security</li>
<li>Reliability</li>
<li>Performance</li>
<li>Cost Optimization</li>
</ol>
<p>The labs in the series cover each of the 5 pillars. This initial post will go over some of the things that I learned about while working through the Operational Excellence pillar.</p>
<h1 id="cloudformation">CloudFormation</h1>
<p>One thing to point out is that the first lab on Operational Excellence makes use of the <a href="https://aws.amazon.com/cloudformation/" title="CloudFormation Service Page">CloudFormation service</a>. If you are not familiar with CloudFormation (CF), it&rsquo;s AWS&rsquo;s declarative Infrastructure as Code (IaC) solution for many things AWS. I say many things and not all things AWS because my experience - albeit limit experience - with it is that CloudFormation is often slow to add support for new services and new features to existing services.</p>
<h2 id="benefits-of-cloudformation-in-personal-aws-accounts">Benefits of CloudFormation in Personal AWS Accounts</h2>
<p>CloudFormation (or any IaC tool) is still a very useful service when deploying infrastructure within AWS as it makes things easily repeatable and scales well amongst other benefits. Possibly the biggest benefit to someone running things in their own AWS account for experimentation is that it provides a single place to deploy a whole host of services, infrastructure and more that could otherwise be difficult to keep track of when it comes time to cleaning up.</p>
<p>If you&rsquo;re running your own personal AWS account to learn new things, I&rsquo;d highly recommend becoming familiar with CloudFormation (or another IaC tool) when deploying infrastructure that could end up costing you money. Once you&rsquo;re done with the infrastructure, deleting the CF stack cleans things up quickly and easily and, ideally, saves you from unexpected bills due to forgotten resources.</p>
<h2 id="fyi-on-uploading-cf-templates-in-the-aws-console">FYI On Uploading CF Templates in the AWS Console</h2>
<p>Something I wanted to point out about CloudFormation is that when you deploy CF templates using the AWS console by uploading a template you have already created/downloaded from somewhere, the CF service will attempt to create an S3 bucket in your account and save the template file there.</p>
<p>The S3 bucket it creates will have a name similar to <code>cf-templates-83lzhmd7bws4-us-east-1</code> (the random bit of text between <code>cf-templates</code> and the region are there to ensure uniqueness in the S3 bucket global namespace). If you end up using the console to upload the same template again at a later time, it will save a new copy of the template to S3. It seems any uploads from the console have a random string added as a prefix to the original filename. To get around repeat uploads of the same template, you can either use the S3 URL when creating a duplicate stack from an existing template, or you can use the AWS CLI when creating stacks.</p>
<h1 id="warp-up">Warp Up</h1>
<p>While I realize this post hardly touched on the labs for the Operations Excellence pillar, to avoid too long of a post, I&rsquo;ll end this one here. AWS provides some powerful tools for provisioning and managing infrastructure and services. The Operational Excellence Pillar of the Well-Architected Framework aims to help organizations deliver business value by doing things like automation, defining standards to manage operations etc. CloudFormation certainly touches on some of these key topics.</p>
]]></content>
        </item>
        
        <item>
            <title>Configuring the Aws Cli</title>
            <link>https://dariushall.com/posts/2021/03/configuring-the-aws-cli/</link>
            <pubDate>Mon, 29 Mar 2021 16:24:16 -0600</pubDate>
            
            <guid>https://dariushall.com/posts/2021/03/configuring-the-aws-cli/</guid>
            <description>Every time I set up a fresh install of an operating system as a result of a new computer or messing around with different OSes on existing systems, I end up having to set up the AWS CLI from scratch. I have multiple personal AWS accounts to use for learning and running services that I want on a more resilient platform than running them on a server at home. It&amp;rsquo;s always a pain to find the right doc pages for setting up the CLI with easy MFA assume role, so it&amp;rsquo;s time to document that here.</description>
            <content type="html"><![CDATA[<p>Every time I set up a fresh install of an operating system as a result of a new computer or messing around with different OSes on existing systems, I end up having to set up the AWS CLI from scratch. I have multiple personal AWS accounts to use for learning and running services that I want on a more resilient platform than running them on a server at home. It&rsquo;s always a pain to find the right doc pages for setting up the CLI with easy MFA assume role, so it&rsquo;s time to document that here.</p>
<h1 id="setting-up-the-aws-credentials-file">Setting Up the AWS Credentials File</h1>
<p>The first step is configuring the <code>~/.aws/credentials</code> file. AWS calls this the &lsquo;shared credentials file&rsquo;. The way I use my accounts, I have set up an AWS Organizations organization. The organization master account is the &lsquo;front-door&rsquo; to my other accounts through a &lsquo;master role&rsquo; that can be assumed in all other accounts (including the org master account). I then have a single IAM user in the org master account which has limited IAM permissions, but which can assume the org master role in my several accounts. As such, the only stanza I have in my shared credentials file is:</p>
<pre><code>[default]
aws_access_key_id = AKIAMYACCESSKEY
aws_secret_access_key = mySeCREtacc3SSk3y+aws
</code></pre>
<p>The above stanza is then used for any CLI call made without specifying a CLI profile. As mentioned earlier, the IAM user to which this credential belongs can&rsquo;t do a whole heck of a lot, so some additional configuration is made in the <code>~/.aws/config</code> file. This file has several more stanzas in it, one of each account in which I want to be able to assume the master role. While I may not be following best practices here for IAM access, being a one man show with only personal accounts and no production sensitive activity going on, this setup suits my needs for now.</p>
<h1 id="setting-up-the-aws-config-file">Setting Up the AWS Config File</h1>
<p>The AWS Configuration file provides a means for defining profiles which I can then use with the <code>--profile</code> flag when making CLI calls. This file provides a means for defining which role should be used and where to look for the MFA device when needing to issue a command to a specific account. I have MFA required for all assumed role calls using the org master role I have set up. The config file looks like this:</p>
<pre><code>[default]
region = us-east-1
output = yaml

[profile org-master]
region = us-east-1
output = yaml
role_arn = arn:aws:iam::210987654321:role/role_to_assume
mfa_serial = arn:aws:iam::210987654321:mfa/iam_user_name
source_profile = default

[profile learning]
region = us-east-1
output = yaml
role_arn = arn:aws:iam::123456789012:role/role_to_assume
mfa_serial = arn:aws:iam::210987654321:mfa/iam_user_name
source_profile = default
</code></pre>
<p>The first stanza is a reference to the default &ldquo;profile&rdquo; and credentials set up in the shared credentials file. The second and third stanzas are named profiles, <code>org-master</code> and <code>learning</code> in this case, which tells the CLI how to access and assume the role required to use the profile. The important bits are <code>role_arn</code>, <code>mfa_serial</code> and <code>source_profile</code>. <code>role_arn</code> should be for the role in the account which you want to jump in to. The <code>mfa_serial</code> tells the CLI in which account the MFA device is configured and this should match the account specified in the <code>source_profile</code> section.</p>
<p>You will notice in the <code>org-master</code> profile, that the AWS account ID in the role ARN and MFA device ARN are the same. In this case, it&rsquo;s because I want to assume the privileged role in the same account as the IAM user assuming the role.</p>
<p>In the <code>learning</code> profile, the account ID in the role ARN and MFA device ARN are different. This is because the IAM user defined in the <code>source_profile</code> (the default profile configured with the access key and secret access key for my IAM user) is to assume the role in the account with the ID specified in the <code>role_arn</code>. This all probably sounds terribly confusing. But once it&rsquo;s configured and you&rsquo;ve issued <code>aws sts get-caller-identity</code> a few times, with and without the <code>--profile</code> flag, you will see how this all works.</p>
<h1 id="scaling-things-up">Scaling Things Up</h1>
<p>On my work laptop, my <code>~/.aws/config</code> and <code>~/.aws/credentials</code> files look a little different. In the shared credentials file, I have a couple of different profiles configured, beyond just the &lsquo;default&rsquo;. The shared credentials file is largely the same, but with several stanzas for each IAM user with their own access key and secret access key&rsquo;s defined.</p>
<p>The configuration file changes a bit in this case if the IAM users are authorized to assume different roles in different accounts. The only things that really change though in the named profiles are the <code>mfa_serial</code> and <code>source_profile</code>. Instead of each named profile having the same configuration for these two settings, they would be changed depending on the IAM user required to assume the roles in the various accounts.</p>
<h1 id="wrapping-up">Wrapping Up</h1>
<p>Hopefully this makes sense to you, the reader. Mostly this is meant to be a quick write up so that I have it available to me next time I need to set this up.</p>
<p>For what it&rsquo;s worth, here are a handful of links that might come in useful:</p>
<ul>
<li><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html">AWS CLI docs on AWS&rsquo;s docs site</a></li>
<li><a href="https://awscli.amazonaws.com/v2/documentation/api/latest/topic/config-vars.html">AWS CLI Command Line Reference config variables</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
